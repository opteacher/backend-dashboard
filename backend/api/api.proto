syntax = "proto3";

package backend.manager.service.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "api";
option (gogoproto.goproto_getters_all) = false;

service BackendManager {
    rpc ModelsInsert(Model) returns (Model) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.insert"
            body: "*"
        };
    };
    rpc ModelsDelete(NameID) returns (Model) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.delete"
            body: "*"
        };
    };
    rpc ModelsUpdate(Model) returns (Empty) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.update"
            body: "*"
        };
    };
    rpc ModelsSelectAll(Empty) returns (ModelArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.selectAll"
            body: "*"
        };
    };
    rpc ModelsSelectByName(NameID) returns (Model) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.selectByName"
            body: "*"
        };
    };
    rpc LinksInsert(Link) returns (Link) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/links.insert"
            body: "*"
        };
    };
    rpc LinksSelectAll(Empty) returns (LinkArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/links.selectAll"
        };
    };
    rpc LinksDeleteBySymbol(SymbolID) returns (Link) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/links.deleteBySymbol"
            body: "*"
        };
    };
    rpc ApisSelectAll(Empty) returns (ApiInfoArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/apis.selectAll"
        };
    };
    rpc ApisInsert(ApiInfo) returns (ApiInfo) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/apis.insert"
            body: "*"
        };
    };
    rpc FlowInsert(FlowReqs) returns (FlowReqs) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/flows.insert"
            body: "*"
        };
    };
    // 这是添加步骤模板，可以通过设置apiName来指定要插入的接口，但只能追加到api流程的最后
    // 如果需要插入到流程中间，则需要使用
    rpc OperStepsInsert(OperStep) returns (OperStep) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/steps.insert"
            body: "*"
        };
    };
    rpc Export(ExpOptions) returns (UrlResp) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/export"
            body: "*"
        };
    };
    rpc SpecialSymbols(Empty) returns (SpecialSymbolsResp) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/specialSymbols"
            body: "*"
        };
    };
}

message Empty {

}

message NumberID {
    int64 id = 1;
}

message NameID {
    string name = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message Prop {
    string name = 1;
    string type = 2;
}

message Model {
    int64 id = 1;
    string name = 2[(gogoproto.moretags)='orm:",UNIQUE_KEY|NOT_NULL|PRIMARY_KEY"'];
    repeated Prop props = 3;
    repeated string methods = 4;
    int32 x = 5[(gogoproto.jsontag) = 'x'];
    int32 y = 6[(gogoproto.jsontag) = 'y'];
    int32 width = 7;
    int32 height = 8;
}

message ModelArray {
    repeated Model models = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message ExpOptions {
    string name = 1;
    string type = 2;
    string routePrefix = 3;
    bool isMicoServ = 4;
    Database database = 5;
}

message Database {
    string type = 1;
    string name = 2;
    string host = 3;
    string port = 4;
    string username = 5;
    string password = 6;
}

message UrlResp {
    string url = 1;
}

// 所有事务流都是函数调用，而且所有的函数返回值都是err结尾
enum SpecialSym {
    NONE = 0;
    FOR_BEG = 1;
    FOR_END = 2;
    IF_BEG = 3;
    IF_END = 4;
    ELSE_BEG = 5;
    ELSE_END = 6;
    RETURN = 7;
}
message OperStep {
    string operKey = 1[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY"'];
    repeated string requires = 2;
    string desc = 3;
    map<string,string> inputs = 4;
    repeated string outputs = 5;
    // 控制着块流程：当遇到blockIn为true的时候，会在添加完该step的code之后，再添加一个块段落，
    // 之后的steps在没有遇到blockOut为true的时候都写在这个段落中，NOTE：blockOut为true的step写在段落外
    bool blockIn = 6;
    bool blockOut = 7;
    string code = 8;
    string apiName = 9[(gogoproto.moretags)='orm:",FOREIGN_KEY(api_infos.name)"'];
    SpecialSym symbol = 10;
}

message ApiInfo {
    string name = 1[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY"'];
    string model = 2;
    string table = 3;
    map<string,string> params = 4;
    string route = 5;
    string method = 6;
    string return = 7;
    repeated OperStep flows = 8;
}

message ApiInfoArray {
    repeated ApiInfo infos = 1;
}

message SpecialSymbolsResp {
    map<string,int32> values = 1;
    map<int32,string> names = 2;
}

message FlowReqs {
    string apiName = 1;
    int32 index = 2;
    string operKey = 3;
    string desc = 4;
    map<string,string> inputs = 5;
    bool blockOut = 6;
    SpecialSym symbol = 7;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message SymbolID {
    string symbol = 1;
}

message Link {
    int64 id = 1;
    string symbol = 2[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY|UNIQUE_KEY"'];
    string modelName1 = 3;
    int32 modelNumber1 = 4[(gogoproto.jsontag) = 'modelNumber1'];
    string modelName2 = 5;
    int32 modelNumber2 = 6[(gogoproto.jsontag) = 'modelNumber2'];
}

message LinkArray {
    repeated Link links = 1;
}