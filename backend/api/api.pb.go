// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: backend/api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/bilibili/kratos/tool/protobuf/pkg/extensions/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ExpOptions_ProjTemp int32

const (
	ExpOptions_KRATOS ExpOptions_ProjTemp = 0
)

var ExpOptions_ProjTemp_name = map[int32]string{
	0: "KRATOS",
}

var ExpOptions_ProjTemp_value = map[string]int32{
	"KRATOS": 0,
}

func (x ExpOptions_ProjTemp) String() string {
	return proto.EnumName(ExpOptions_ProjTemp_name, int32(x))
}

func (ExpOptions_ProjTemp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_65b4dc72532dac7d, []int{6, 0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b4dc72532dac7d, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type NumberID struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberID) Reset()         { *m = NumberID{} }
func (m *NumberID) String() string { return proto.CompactTextString(m) }
func (*NumberID) ProtoMessage()    {}
func (*NumberID) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b4dc72532dac7d, []int{1}
}
func (m *NumberID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NumberID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NumberID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NumberID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberID.Merge(m, src)
}
func (m *NumberID) XXX_Size() int {
	return m.Size()
}
func (m *NumberID) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberID.DiscardUnknown(m)
}

var xxx_messageInfo_NumberID proto.InternalMessageInfo

type NameID struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameID) Reset()         { *m = NameID{} }
func (m *NameID) String() string { return proto.CompactTextString(m) }
func (*NameID) ProtoMessage()    {}
func (*NameID) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b4dc72532dac7d, []int{2}
}
func (m *NameID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameID.Merge(m, src)
}
func (m *NameID) XXX_Size() int {
	return m.Size()
}
func (m *NameID) XXX_DiscardUnknown() {
	xxx_messageInfo_NameID.DiscardUnknown(m)
}

var xxx_messageInfo_NameID proto.InternalMessageInfo

type Prop struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Prop) Reset()         { *m = Prop{} }
func (m *Prop) String() string { return proto.CompactTextString(m) }
func (*Prop) ProtoMessage()    {}
func (*Prop) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b4dc72532dac7d, []int{3}
}
func (m *Prop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Prop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Prop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Prop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prop.Merge(m, src)
}
func (m *Prop) XXX_Size() int {
	return m.Size()
}
func (m *Prop) XXX_DiscardUnknown() {
	xxx_messageInfo_Prop.DiscardUnknown(m)
}

var xxx_messageInfo_Prop proto.InternalMessageInfo

type Model struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" orm:",NOT_NULL|PRIMARY_KEY"`
	Props                []*Prop  `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	Methods              []string `protobuf:"bytes,4,rep,name=methods,proto3" json:"methods,omitempty"`
	X                    int32    `protobuf:"varint,5,opt,name=x,proto3" json:"x"`
	Y                    int32    `protobuf:"varint,6,opt,name=y,proto3" json:"y"`
	Width                int32    `protobuf:"varint,7,opt,name=width,proto3" json:"width,omitempty"`
	Height               int32    `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Model) Reset()         { *m = Model{} }
func (m *Model) String() string { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()    {}
func (*Model) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b4dc72532dac7d, []int{4}
}
func (m *Model) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Model) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Model.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Model) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Model.Merge(m, src)
}
func (m *Model) XXX_Size() int {
	return m.Size()
}
func (m *Model) XXX_DiscardUnknown() {
	xxx_messageInfo_Model.DiscardUnknown(m)
}

var xxx_messageInfo_Model proto.InternalMessageInfo

type ModelArray struct {
	Models               []*Model `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModelArray) Reset()         { *m = ModelArray{} }
func (m *ModelArray) String() string { return proto.CompactTextString(m) }
func (*ModelArray) ProtoMessage()    {}
func (*ModelArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b4dc72532dac7d, []int{5}
}
func (m *ModelArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelArray.Merge(m, src)
}
func (m *ModelArray) XXX_Size() int {
	return m.Size()
}
func (m *ModelArray) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelArray.DiscardUnknown(m)
}

var xxx_messageInfo_ModelArray proto.InternalMessageInfo

type ExpOptions struct {
	Name                 string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjTemp             ExpOptions_ProjTemp `protobuf:"varint,2,opt,name=projTemp,proto3,enum=backend.manager.service.v1.ExpOptions_ProjTemp" json:"projTemp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ExpOptions) Reset()         { *m = ExpOptions{} }
func (m *ExpOptions) String() string { return proto.CompactTextString(m) }
func (*ExpOptions) ProtoMessage()    {}
func (*ExpOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b4dc72532dac7d, []int{6}
}
func (m *ExpOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpOptions.Merge(m, src)
}
func (m *ExpOptions) XXX_Size() int {
	return m.Size()
}
func (m *ExpOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ExpOptions proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("backend.manager.service.v1.ExpOptions_ProjTemp", ExpOptions_ProjTemp_name, ExpOptions_ProjTemp_value)
	proto.RegisterType((*Empty)(nil), "backend.manager.service.v1.Empty")
	proto.RegisterType((*NumberID)(nil), "backend.manager.service.v1.NumberID")
	proto.RegisterType((*NameID)(nil), "backend.manager.service.v1.NameID")
	proto.RegisterType((*Prop)(nil), "backend.manager.service.v1.Prop")
	proto.RegisterType((*Model)(nil), "backend.manager.service.v1.Model")
	proto.RegisterType((*ModelArray)(nil), "backend.manager.service.v1.ModelArray")
	proto.RegisterType((*ExpOptions)(nil), "backend.manager.service.v1.ExpOptions")
}

func init() { proto.RegisterFile("backend/api/api.proto", fileDescriptor_65b4dc72532dac7d) }

var fileDescriptor_65b4dc72532dac7d = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0x99, 0x96, 0x2e, 0xe5, 0x69, 0xd0, 0x8c, 0x40, 0x36, 0x95, 0x94, 0x32, 0x07, 0xd2,
	0x20, 0x6c, 0x95, 0x26, 0x24, 0x70, 0x6b, 0x43, 0x63, 0x1a, 0xa0, 0x90, 0x05, 0x0e, 0x78, 0x21,
	0x5b, 0x76, 0xd2, 0xae, 0x76, 0x77, 0x26, 0xb3, 0x03, 0x76, 0x13, 0x2f, 0x9a, 0x78, 0xd0, 0xab,
	0xc6, 0xbf, 0x89, 0xa3, 0x89, 0x77, 0xa2, 0xc4, 0x8b, 0x1e, 0x3d, 0x78, 0x36, 0x33, 0xd3, 0x82,
	0x31, 0xd8, 0x62, 0xe4, 0xd0, 0x64, 0xe6, 0xfb, 0x7e, 0x7c, 0x3f, 0xfb, 0xde, 0x6e, 0x61, 0xaa,
	0xe9, 0x1d, 0x3d, 0xa3, 0x91, 0x5f, 0xf2, 0x78, 0xa0, 0x7e, 0x0e, 0x17, 0x4c, 0x32, 0x9c, 0xeb,
	0xc9, 0x4e, 0xe8, 0x45, 0x5e, 0x8b, 0x0a, 0x27, 0xa6, 0xe2, 0x24, 0x38, 0xa2, 0xce, 0xc9, 0xa3,
	0xdc, 0x64, 0x8b, 0xb5, 0x98, 0x4e, 0x2b, 0xa9, 0x93, 0xa9, 0xc8, 0xcd, 0xb4, 0x18, 0x6b, 0x75,
	0xa8, 0xe9, 0x13, 0x45, 0x4c, 0x7a, 0x32, 0x60, 0x51, 0x6c, 0xa2, 0x64, 0x0c, 0x32, 0xb5, 0x90,
	0xcb, 0x84, 0xe4, 0x20, 0xdb, 0x38, 0x0e, 0x9b, 0x54, 0xd4, 0xd7, 0xf1, 0x04, 0xa4, 0x02, 0xdf,
	0x46, 0x05, 0x54, 0x4c, 0xbb, 0xa9, 0xc0, 0x27, 0x33, 0x60, 0x35, 0xbc, 0x90, 0xd6, 0xd7, 0x31,
	0x86, 0xd1, 0xc8, 0x0b, 0xa9, 0x8e, 0x8d, 0xbb, 0xfa, 0x4c, 0x1c, 0x18, 0xdd, 0x11, 0x8c, 0x5f,
	0x15, 0x53, 0x9a, 0x4c, 0x38, 0xb5, 0x53, 0x46, 0x53, 0x67, 0xf2, 0x13, 0x41, 0x66, 0x8b, 0xf9,
	0xb4, 0xf3, 0xa7, 0x0f, 0x2e, 0xf7, 0x3a, 0xe8, 0xec, 0xea, 0xec, 0x8f, 0xb3, 0xd9, 0xfb, 0x4c,
	0x84, 0x6b, 0x64, 0xb1, 0xb1, 0xbd, 0x77, 0xd8, 0xd8, 0xdf, 0xdc, 0x7c, 0xb1, 0xe3, 0xd6, 0xb7,
	0x2a, 0xee, 0xc1, 0xe1, 0x46, 0xed, 0x80, 0xf4, 0x2c, 0x56, 0x20, 0xc3, 0x05, 0xe3, 0xb1, 0x9d,
	0x2e, 0xa4, 0x8b, 0xb7, 0x96, 0x0b, 0xce, 0xdf, 0x27, 0xe4, 0x28, 0x4e, 0xd7, 0xa4, 0x63, 0x1b,
	0xc6, 0x42, 0x2a, 0xdb, 0xcc, 0x8f, 0xed, 0xd1, 0x42, 0xba, 0x38, 0xee, 0xf6, 0xaf, 0xf8, 0x1e,
	0xa0, 0xae, 0x9d, 0x29, 0xa0, 0x62, 0xa6, 0x9a, 0xf9, 0x7e, 0x36, 0x8b, 0xba, 0x2e, 0xea, 0x2a,
	0x31, 0xb1, 0xad, 0x4b, 0x31, 0x71, 0x51, 0x82, 0x27, 0x21, 0xf3, 0x3c, 0xf0, 0x65, 0xdb, 0x1e,
	0x53, 0x01, 0xd7, 0x5c, 0xf0, 0x34, 0x58, 0x6d, 0x1a, 0xb4, 0xda, 0xd2, 0xce, 0x6a, 0xb9, 0x77,
	0x23, 0x8f, 0x01, 0xf4, 0x73, 0x57, 0x84, 0xf0, 0x12, 0xbc, 0x0a, 0x56, 0xa8, 0x6e, 0xb1, 0x8d,
	0x34, 0xf8, 0xdc, 0x20, 0x70, 0x5d, 0xe7, 0xf6, 0x0a, 0xc8, 0x6b, 0x04, 0x50, 0xeb, 0xf2, 0x6d,
	0xae, 0x37, 0x79, 0xe5, 0xe0, 0x37, 0x20, 0xcb, 0x05, 0x7b, 0xba, 0x47, 0x43, 0xae, 0xc7, 0x39,
	0xb1, 0x5c, 0x1a, 0xd4, 0xff, 0xb2, 0x9b, 0x9a, 0x91, 0x2e, 0x73, 0x2f, 0x1a, 0x90, 0x69, 0xc8,
	0xf6, 0x55, 0x0c, 0x60, 0x6d, 0xb8, 0x95, 0xbd, 0xed, 0xdd, 0xbb, 0x23, 0xcb, 0xdf, 0x2c, 0x98,
	0xa8, 0x9a, 0xa6, 0x5b, 0xa6, 0x27, 0x7e, 0x83, 0xe0, 0xb6, 0x86, 0x8d, 0xeb, 0x51, 0x4c, 0x85,
	0xc4, 0xc3, 0x1f, 0x2b, 0x37, 0x3c, 0x85, 0x94, 0x5f, 0x7d, 0xfa, 0xfa, 0x2e, 0xb5, 0x44, 0x8a,
	0xa5, 0x5e, 0xea, 0x92, 0xef, 0xc5, 0xed, 0x26, 0xf3, 0x84, 0xdf, 0x57, 0x4a, 0x66, 0x38, 0x4e,
	0xa0, 0x7d, 0xd7, 0xd0, 0x02, 0x7e, 0x7b, 0xc1, 0xb2, 0x4e, 0x3b, 0x54, 0x52, 0x4c, 0x06, 0x19,
	0x99, 0x37, 0xfc, 0x86, 0x61, 0x7c, 0x6d, 0xac, 0x60, 0x2e, 0x07, 0xb3, 0xcf, 0x7d, 0x4f, 0xd2,
	0xff, 0x1e, 0x8c, 0xf9, 0x6c, 0xff, 0x81, 0xe5, 0x58, 0xfb, 0x2a, 0x96, 0xf7, 0x08, 0xee, 0x18,
	0x96, 0x5d, 0xda, 0xa1, 0x47, 0xb2, 0xd2, 0xe9, 0xe0, 0xe1, 0x5e, 0xb9, 0xf9, 0xa1, 0xc4, 0xfa,
	0xcd, 0x26, 0x2b, 0x9a, 0xe9, 0x21, 0x79, 0x30, 0x9c, 0x29, 0xee, 0xfb, 0x2b, 0xac, 0x0f, 0x08,
	0xf0, 0xef, 0x58, 0xd5, 0x44, 0xed, 0xe4, 0xa6, 0xb6, 0xb6, 0xaa, 0xa9, 0xca, 0xc4, 0xb9, 0x2e,
	0x95, 0xb1, 0x57, 0x60, 0x2f, 0x11, 0x58, 0xb5, 0x2e, 0x67, 0x42, 0xe2, 0xf9, 0xeb, 0x7d, 0x45,
	0xd7, 0x59, 0xdd, 0xa2, 0x06, 0x9a, 0x27, 0x73, 0x03, 0x80, 0xa8, 0x76, 0x5d, 0x43, 0x0b, 0xd5,
	0xa9, 0xd3, 0x2f, 0xf9, 0x91, 0xd3, 0xf3, 0x3c, 0xfa, 0x78, 0x9e, 0x47, 0x9f, 0xcf, 0xf3, 0xe8,
	0x49, 0xda, 0xe3, 0x41, 0xd3, 0xd2, 0x7f, 0xe3, 0xe5, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc6,
	0x5b, 0x77, 0x32, 0x2f, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BackendManagerClient is the client API for BackendManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendManagerClient interface {
	ModelsInsert(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Model, error)
	ModelsDelete(ctx context.Context, in *NameID, opts ...grpc.CallOption) (*Model, error)
	ModelsUpdate(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Empty, error)
	ModelsSelectAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ModelArray, error)
	ModelsSelectByName(ctx context.Context, in *NameID, opts ...grpc.CallOption) (*Model, error)
	Export(ctx context.Context, in *ExpOptions, opts ...grpc.CallOption) (*Empty, error)
}

type backendManagerClient struct {
	cc *grpc.ClientConn
}

func NewBackendManagerClient(cc *grpc.ClientConn) BackendManagerClient {
	return &backendManagerClient{cc}
}

func (c *backendManagerClient) ModelsInsert(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/backend.manager.service.v1.BackendManager/ModelsInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendManagerClient) ModelsDelete(ctx context.Context, in *NameID, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/backend.manager.service.v1.BackendManager/ModelsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendManagerClient) ModelsUpdate(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/backend.manager.service.v1.BackendManager/ModelsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendManagerClient) ModelsSelectAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ModelArray, error) {
	out := new(ModelArray)
	err := c.cc.Invoke(ctx, "/backend.manager.service.v1.BackendManager/ModelsSelectAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendManagerClient) ModelsSelectByName(ctx context.Context, in *NameID, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/backend.manager.service.v1.BackendManager/ModelsSelectByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendManagerClient) Export(ctx context.Context, in *ExpOptions, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/backend.manager.service.v1.BackendManager/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendManagerServer is the server API for BackendManager service.
type BackendManagerServer interface {
	ModelsInsert(context.Context, *Model) (*Model, error)
	ModelsDelete(context.Context, *NameID) (*Model, error)
	ModelsUpdate(context.Context, *Model) (*Empty, error)
	ModelsSelectAll(context.Context, *Empty) (*ModelArray, error)
	ModelsSelectByName(context.Context, *NameID) (*Model, error)
	Export(context.Context, *ExpOptions) (*Empty, error)
}

func RegisterBackendManagerServer(s *grpc.Server, srv BackendManagerServer) {
	s.RegisterService(&_BackendManager_serviceDesc, srv)
}

func _BackendManager_ModelsInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendManagerServer).ModelsInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.manager.service.v1.BackendManager/ModelsInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendManagerServer).ModelsInsert(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendManager_ModelsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendManagerServer).ModelsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.manager.service.v1.BackendManager/ModelsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendManagerServer).ModelsDelete(ctx, req.(*NameID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendManager_ModelsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendManagerServer).ModelsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.manager.service.v1.BackendManager/ModelsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendManagerServer).ModelsUpdate(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendManager_ModelsSelectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendManagerServer).ModelsSelectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.manager.service.v1.BackendManager/ModelsSelectAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendManagerServer).ModelsSelectAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendManager_ModelsSelectByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendManagerServer).ModelsSelectByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.manager.service.v1.BackendManager/ModelsSelectByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendManagerServer).ModelsSelectByName(ctx, req.(*NameID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendManager_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendManagerServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.manager.service.v1.BackendManager/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendManagerServer).Export(ctx, req.(*ExpOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _BackendManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "backend.manager.service.v1.BackendManager",
	HandlerType: (*BackendManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModelsInsert",
			Handler:    _BackendManager_ModelsInsert_Handler,
		},
		{
			MethodName: "ModelsDelete",
			Handler:    _BackendManager_ModelsDelete_Handler,
		},
		{
			MethodName: "ModelsUpdate",
			Handler:    _BackendManager_ModelsUpdate_Handler,
		},
		{
			MethodName: "ModelsSelectAll",
			Handler:    _BackendManager_ModelsSelectAll_Handler,
		},
		{
			MethodName: "ModelsSelectByName",
			Handler:    _BackendManager_ModelsSelectByName_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _BackendManager_Export_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/api/api.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NumberID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NumberID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NameID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Prop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Prop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Props) > 0 {
		for _, msg := range m.Props {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Methods) > 0 {
		for _, s := range m.Methods {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.X != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.X))
	}
	if m.Y != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Y))
	}
	if m.Width != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ModelArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Models) > 0 {
		for _, msg := range m.Models {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExpOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ProjTemp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ProjTemp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NumberID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NameID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Prop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Model) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Props) > 0 {
		for _, e := range m.Props {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Methods) > 0 {
		for _, s := range m.Methods {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.X != 0 {
		n += 1 + sovApi(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovApi(uint64(m.Y))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModelArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Models) > 0 {
		for _, e := range m.Models {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExpOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ProjTemp != 0 {
		n += 1 + sovApi(uint64(m.ProjTemp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NumberID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NumberID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NumberID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Prop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Prop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Prop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Props", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Props = append(m.Props, &Prop{})
			if err := m.Props[len(m.Props)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Methods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Methods = append(m.Methods, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Models = append(m.Models, &Model{})
			if err := m.Models[len(m.Models)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjTemp", wireType)
			}
			m.ProjTemp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjTemp |= ExpOptions_ProjTemp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
