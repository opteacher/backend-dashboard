syntax = "proto3";

package backend.manager.service.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "api";
option (gogoproto.goproto_getters_all) = false;

service BackendManager {
    rpc ModelsInsert(Model) returns (Model) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.insert"
            body: "*"
        };
    };
    rpc ModelsDelete(NameID) returns (Model) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.delete"
            body: "*"
        };
    };
    rpc ModelsUpdate(Model) returns (Empty) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.update"
            body: "*"
        };
    };
    rpc ModelsSelectAll(TypeIden) returns (ModelArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.selectAll"
            body: "*"
        };
    };
    rpc StructsSelectAllBases(Empty) returns (NameArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/structs.selectAllBases"
            body: "*"
        };
    };
    rpc LinksInsert(Link) returns (Link) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/links.insert"
            body: "*"
        };
    };
    rpc LinksSelectAll(Empty) returns (LinkArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/links.selectAll"
        };
    };
    rpc LinksDeleteBySymbol(SymbolID) returns (Link) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/links.deleteBySymbol"
            body: "*"
        };
    };
    rpc ApisSelectByName(NameID) returns (ApiInfo) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/apis.selectByName"
            body: "*"
        };
    };
    rpc ApisSelectAll(Empty) returns (ApiInfoArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/apis.selectAll"
        };
    };
    rpc ApisInsert(ApiInfo) returns (ApiInfo) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/apis.insert"
            body: "*"
        };
    };
    rpc ApisDeleteByName(NameID) returns (ApiInfo) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/apis.deleteByName"
            body: "*"
        };
    };
    rpc StepsInsert(StepReqs) returns (Empty) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/steps.insert"
            body: "*"
        };
    };
    rpc StepsDelete(DelStepReqs) returns (Empty) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/steps.delete"
            body: "*"
        };
    };
    rpc OperStepsSelectTemp(Empty) returns (OperStepArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/steps.selectTemp"
        };
    };
    rpc OperStepsInsert(OperStep) returns (OperStep) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/steps.insertTemp"
            body: "*"
        };
    };
    rpc DaoGroupsSelectAll(Empty) returns (DaoGroupArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/dao.groups.selectAll"
        };
    };
    rpc DaoGroupsInsert(DaoGroup) returns (DaoGroup) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/dao.groups.insert"
            body: "*"
        };
    };
    rpc Export(ExpOptions) returns (UrlResp) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/export"
            body: "*"
        };
    };
    rpc SpecialSymbols(Empty) returns (SymbolsResp) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/specialSymbols"
            body: "*"
        };
    };
}

message Empty {

}

message NumberID {
    int64 id = 1;
}

message NameID {
    string name = 1;
}

message TypeIden {
    string type = 1;
}

message NameArray {
    repeated string names = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message Prop {
    string name = 1;
    string type = 2;
}

message Model {
    string id = 1;
    string name = 2[(gogoproto.moretags)='orm:",UNIQUE_KEY|NOT_NULL|PRIMARY_KEY|COMMENT(模块名)"'];
    repeated Prop props = 3;
    repeated string methods = 4;
    string type = 5[(gogoproto.moretags)='orm:",DEFAULT(\'model\')|COMMENT(种类：模块、结构)"'];
    string model = 6[(gogoproto.moretags)='orm:",FOREIGN_KEY(models.name)|COMMENT(关联模块)"'];
    int32 x = 7[(gogoproto.jsontag) = 'x'];
    int32 y = 8[(gogoproto.jsontag) = 'y'];
    float width = 9[(gogoproto.jsontag) = 'width'];
    float height = 10[(gogoproto.jsontag) = 'height'];
}

message ModelArray {
    repeated Model models = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message DaoGroup {
    string name = 1[(gogoproto.moretags)='orm:",PRIMARY_KEY|UNIQUE_KEY"'];
    string category = 2[(gogoproto.moretags)='orm:",FOREIGN_KEY(dao_categories.name)"'];
    string language = 3;
    repeated DaoInterface interfaces = 4[(gogoproto.moretags)='orm:"*"'];
}

message DaoCategory {
    string name = 1[(gogoproto.moretags)='orm:",PRIMARY_KEY|UNIQUE_KEY|COMMENT(类别)"'];
    string desc = 2[(gogoproto.moretags)='orm:",COMMENT(类别描述)"'];
    string lang = 3[(gogoproto.moretags)='orm:",INDEX|COMMENT(适用语言)"'];
}

message DaoGroupArray {
    repeated DaoGroup groups = 1;
}

message DaoConfig {
    string name = 1[(gogoproto.moretags)='orm:",PRIMARY_KEY|COMMENT(键名)"'];
    string value = 2[(gogoproto.moretags)='orm:",COMMENT(键值（按JSON字符串存储）)"'];
    string implement = 3[(gogoproto.moretags)='orm:",PRIMARY_KEY|COMMENT(所属实现方案)"'];
    string desc = 4[(gogoproto.moretags)='orm:",COMMENT(备注)"'];
}

message DaoInterface {
    string name = 1[(gogoproto.moretags)='orm:",PRIMARY_KEY|COMMENT(接口名、函数名)"'];
    string category = 2[(gogoproto.moretags)='orm:",FOREIGN_KEY(dao_categories.name)"'];
    repeated Prop params = 3[(gogoproto.moretags)='orm:",COMMENT(输入数据)"'];
    repeated string returns = 4[(gogoproto.moretags)='orm:",COMMENT(输出数据)"'];
    repeated string requires = 5[(gogoproto.moretags)='orm:",COMMENT(需求的模块)"'];
    string desc = 6[(gogoproto.moretags)='orm:",COMMENT(接口描述)"'];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message ExpOptions {
    string name = 1;
    string type = 2;
    string routePrefix = 3;
    bool isMicoServ = 4;
    Database database = 5;
}

message Database {
    string type = 1;
    string name = 2;
    string host = 3;
    string port = 4;
    string username = 5;
    string password = 6;
}

message UrlResp {
    string url = 1;
}

enum SpcSymbol {
    NONE = 0;
    BLOCK_IN = 1;
    BLOCK_OUT = 2;
    END = 4;
}

// 所有事务流都是函数调用，而且所有的函数返回值都是err结尾
message OperStep {
    string operKey = 1[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY"'];
    repeated string requires = 2;
    string desc = 3;
    map<string,string> inputs = 4;
    repeated string outputs = 5;
    string code = 6;
    string apiName = 7[(gogoproto.moretags)='orm:",FOREIGN_KEY(api_infos.name)"'];
    SpcSymbol symbol = 8;
    int32 index = 9[(gogoproto.jsontag) = 'index'];
}

message ApiInfo {
    string name = 1[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY"'];
    string model = 2;
    string table = 3;
    map<string,string> params = 4;
    string route = 5;
    string method = 6;
    repeated string returns = 7;
    repeated OperStep steps = 8;
}

message ApiInfoArray {
    repeated ApiInfo infos = 1;
}

message OperStepArray {
    repeated OperStep steps = 1;
}

message SymbolsResp {
    map<string,int32> values = 1;
    map<int32,string> names = 2;
}

message StepReqs {
    int32 index = 1;
    OperStep operStep = 2;
}

message DelStepReqs {
    string apiName = 1;
    int32 stepId = 2;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message SymbolID {
    string symbol = 1;
}

message Link {
    string id = 1;
    string symbol = 2[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY|UNIQUE_KEY"'];
    string mname1 = 3[(gogoproto.moretags)='orm:",FOREIGN_KEY(model1:models.name)"'];
    int32 mnumber1 = 4[(gogoproto.jsontag) = 'mnumber1'];
    string mname2 = 5[(gogoproto.moretags)='orm:",FOREIGN_KEY(model2:models.name)"'];
    int32 mnumber2 = 6[(gogoproto.jsontag) = 'mnumber2'];
}

message LinkArray {
    repeated Link links = 1;
}