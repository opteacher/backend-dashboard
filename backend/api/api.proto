syntax = "proto3";

package backend.manager.service.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "api";
option (gogoproto.goproto_getters_all) = false;

service BackendManager {
    rpc ModelsInsert(Model) returns (Model) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.insert"
            body: "*"
        };
    };
    rpc ModelsInsertMany(ModelArray) returns (ModelArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.insertMany"
            body: "*"
        };
    };
    rpc ModelsDelete(NameID) returns (Model) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.delete"
            body: "*"
        };
    };
    rpc ModelsUpdate(Model) returns (Empty) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.update"
            body: "*"
        };
    };
    rpc ModelsSelectAll(TypeIden) returns (ModelArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.selectAll"
            body: "*"
        };
    };
    rpc StructsSelectAllBases(Empty) returns (NameArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/structs.selectAllBases"
            body: "*"
        };
    };
    rpc LinksInsert(Link) returns (Link) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/links.insert"
            body: "*"
        };
    };
    rpc LinksSelectAll(Empty) returns (LinkArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/links.selectAll"
        };
    };
    rpc LinksDeleteBySymbol(SymbolID) returns (Link) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/links.deleteBySymbol"
            body: "*"
        };
    };
    rpc ApisSelectByName(NameID) returns (ApiInfo) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/apis.selectByName"
            body: "*"
        };
    };
    rpc ApisSelectAll(Empty) returns (ApiInfoArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/apis.selectAll"
        };
    };
    rpc ApisInsert(ApiInfo) returns (ApiInfo) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/apis.insert"
            body: "*"
        };
    };
    rpc ApisInsertByTemp(AddTmpApiToMdlReq) returns (ApiInfo) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/apis.insertByTemp"
            body: "*"
        };
    };
    rpc ApisDeleteByName(NameID) returns (ApiInfo) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/apis.deleteByName"
            body: "*"
        };
    };
    rpc TempApiSelectAll(Empty) returns (ApiInfoArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/temp.apis.selectAll"
        };
    };
    rpc TempApiSelectByCategory(CategoryIden) returns (ApiInfoArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/temp.apis.selectByCategory"
            body: "*"
        };
    };
    rpc TempApiInsert(ApiInfo) returns (ApiInfo) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/temp.apis.insert"
            body: "*"
        };
    };
    rpc TempApiInsertMany(ApiInfoArray) returns (ApiInfoArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/temp.apis.insertMany"
            body: "*"
        };
    };
    rpc StepsInsert(StepReqs) returns (Empty) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/steps.insert"
            body: "*"
        };
    };
    rpc StepsDelete(DelStepReqs) returns (Empty) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/steps.delete"
            body: "*"
        };
    };
    rpc TempStepsSelectAll(Empty) returns (StepArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/temp.steps.selectAll"
        };
    };
    rpc TempStepsSelectByKey(StrKey) returns (Step) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/temp.steps.selectByKey"
            body: "*"
        };
    };
    rpc TempStepsInsert(Step) returns (Step) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/temp.steps.insert"
            body: "*"
        };
    };
    rpc TempStepsInsertMany(StepArray) returns (StepArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/temp.steps.insertMany"
            body: "*"
        };
    };
    rpc TempStepsDeleteByKey(StrKey) returns (Step) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/temp.steps.deleteByKey"
            body: "*"
        };
    };
    rpc DaoGroupsSelectAll(Empty) returns (DaoGroupArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/dao.groups.selectAll"
        };
    };
    rpc DaoGroupSelectByName(NameID) returns (DaoGroup) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/dao.groups.selectByName"
        };
    };
    rpc DaoGroupsInsert(DaoGroup) returns (DaoGroup) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/dao.groups.insert"
            body: "*"
        };
    };
    rpc DaoGroupDeleteByName(NameID) returns (DaoGroup) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/dao.groups.deleteByName"
            body: "*"
        };
    };
    rpc DaoGroupUpdateImplement(DaoGrpSetImpl) returns (DaoGroup) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/dao.groups.updateImplement"
            body: "*"
        };
    };
    rpc TempDaoGroupsSelectAll(Empty) returns (DaoGroupArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/temp.dao.groups.selectAll"
        };
    };
    rpc DaoInterfaceInsert(DaoItfcIst) returns (DaoInterface) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/dao.interface.insert"
            body: "*"
        };
    };
    rpc DaoInterfaceDelete(DaoItfcIden) returns (DaoInterface) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/dao.interface.delete"
            body: "*"
        };
    };
    rpc DaoConfigInsert(DaoConfig) returns (DaoConfig) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/dao.config.insert"
            body: "*"
        };
    };
    rpc DaoConfigSelectByImpl(DaoConfImplIden) returns (DaoConfig) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/dao.config.selectByImpl"
            body: "*"
        };
    };
    rpc Export(ExpOptions) returns (UrlResp) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/export"
            body: "*"
        };
    };
    rpc TempFrameworkSelect(Empty) returns (Framework.Array) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/temp.framework.selectAll"
        };
    };
    rpc SpecialSymbols(Empty) returns (SymbolsResp) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/specialSymbols"
            body: "*"
        };
    };
    rpc ModuleSignSelectAll(TypeIden) returns (ModuleSignArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/mod.sign.selectAll"
            body: "*"
        };
    };
    rpc ModuleInfoSelectBySignId(StrID) returns (ModuleSign) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/mod.info.selectBySignId"
            body: "*"
        };
    };
}

message Empty {

}

message NumberID {
    int64 id = 1;
}

message NameID {
    string name = 1;
}

message StrID {
    string id = 1;
}

message StrKey {
    string key = 1;
}

message StrResp {
    string message = 1;
}

message TypeIden {
    string type = 1;
}

message NameArray {
    repeated string names = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message Framework {
    string id = 1;
    string name = 2;
    string lang = 3;
    string generator = 4;// 参数1是Service指针，参数2是ProjInfo指针；返回值1是导出器实例，返回值2是错误
    repeated string supports = 5;// 组件支持：与ExpOptions对应：微服务、前端环境

    message Array {
        repeated Framework frameworks = 1;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message Prop {
    string name = 1;
    string type = 2;
    string desc = 3;
}

message Model {
    string id = 1;
    string name = 2[(gogoproto.moretags)='orm:",UNIQUE_KEY|NOT_NULL|PRIMARY_KEY|COMMENT(模块名)"'];
    repeated Prop props = 3;
    repeated string methods = 4;
    string type = 5[(gogoproto.moretags)='orm:",DEFAULT(\'model\')|COMMENT(种类：模块、结构)"'];
    string model = 6[(gogoproto.moretags)='orm:",FOREIGN_KEY(models.name)|COMMENT(关联模块)"'];
    int32 x = 7[(gogoproto.jsontag) = 'x'];
    int32 y = 8[(gogoproto.jsontag) = 'y'];
    float width = 9[(gogoproto.jsontag) = 'width'];
    float height = 10[(gogoproto.jsontag) = 'height'];
}

message ModelArray {
    repeated Model models = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message DaoGroup {
    string name = 1[(gogoproto.moretags)='orm:",PRIMARY_KEY|UNIQUE_KEY"'];
    repeated string categories = 2[(gogoproto.moretags)='orm:",FOREIGN_KEY(dao_categories.name)"'];
    string language = 3;
    string implement = 4;
    repeated DaoInterface interfaces = 5[(gogoproto.moretags)='orm:"*"'];
}

message DaoCategory {
    string name = 1[(gogoproto.moretags)='orm:",PRIMARY_KEY|UNIQUE_KEY|COMMENT(类别)"'];
    string desc = 2[(gogoproto.moretags)='orm:",COMMENT(类别描述)"'];
    string lang = 3[(gogoproto.moretags)='orm:",INDEX|COMMENT(适用语言)"'];
}

message DaoGroupArray {
    repeated DaoGroup groups = 1;
}

message DaoConfItem {
    string key = 1;
    string type = 2;
    string value = 3;
}

message DaoConfig {
    string implement = 1;
    repeated DaoConfItem configs = 2;
}

message DaoConfImplIden {
    string implement = 1;
}

message DaoInterface {
    string name = 1[(gogoproto.moretags)='orm:",PRIMARY_KEY|COMMENT(接口名、函数名)"'];
    repeated Prop params = 3[(gogoproto.moretags)='orm:",COMMENT(输入数据)"'];
    repeated string returns = 4[(gogoproto.moretags)='orm:",COMMENT(输出数据)"'];
    repeated string requires = 5[(gogoproto.moretags)='orm:",COMMENT(需求的模块)"'];
    string desc = 6[(gogoproto.moretags)='orm:",COMMENT(接口描述)"'];
}

message DaoItfcIden {
    string gpname = 1;
    string ifname = 2;
}

message DaoItfcIst {
    string gpname = 1[(gogoproto.jsontag) = 'gpname'];
    DaoInterface interface = 2[(gogoproto.jsontag) = 'interface'];
}

message DaoGrpSetImpl {
    string gpname = 1;
    string implId = 2;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message ExpOpnComp {
    string name = 1;// 同Framework的supports和ExpOptions的compSupports键值
    bool enable = 2;
    map<string, string> options = 3;
}

message ExpOptions {
    string name = 1;
    string type = 2;
    // micoService：微服务支持
    // frontendEnv：前端环境预配置
    map<string, ExpOpnComp> components = 3;
}

message Database {
    string type = 1;
    string name = 2;
    string host = 3;
    string port = 4;
    string username = 5;
    string password = 6;
}

message UrlResp {
    string url = 1;
}

enum SpcSymbol {
    NONE = 0;
    BLOCK_IN = 1;
    BLOCK_OUT = 2;
    END = 4;
}

// 所有事务流都是函数调用，而且所有的函数返回值都是err结尾
message Step {
    string key = 1[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY"'];
    string lang = 2;
    repeated string requires = 3;
    string desc = 4;
    map<string, Prop> inputs = 5;
    repeated string outputs = 6;
    string code = 7;
    string apiname = 8[(gogoproto.moretags)='orm:",FOREIGN_KEY(api_infos.name)"'];
    SpcSymbol symbol = 9;
    int32 index = 10[(gogoproto.jsontag) = 'index'];
    string group = 11;
}

message ActivatedByHttp {
    string route = 1;
    string method = 2;
}

message ActivatedByTiming {
    string type = 1;
    int64 mseconds = 2;
    string hms = 3;
}

message ActivatedBySubscribe {
    string channel = 1;
    string daoGroup = 2;
}

message ApiInfo {
    string name = 1[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY"'];
    string category = 2;// 同DAO组的类别
    string group = 3;// DAO组名
    string symbol = 4;// 特殊标识
    string model = 5;
    string table = 6;
    repeated Prop params = 7;
    // 目前有三种激活方式：
    // 1. HTTP方式（http），包含：method和route字段指定访问方式和路径
    ActivatedByHttp http = 8;
    // 2. 定时方式（timing），包含：cron字段指定定时规则
    ActivatedByTiming timing = 9;
    // 3. 订阅通知方式（subscribe），包含：channel和daoGroup字段指定监听频道和处理通知的DAO组
    ActivatedBySubscribe subscribe = 10;
    repeated string returns = 11;
    repeated Step steps = 12;
}

message ApiInfoArray {
    repeated ApiInfo infos = 1;
}

message StepArray {
    repeated Step steps = 1;
}

message AddTmpApiToMdlReq {
    NameID modelName = 1;
    ApiInfo tempApi = 2;
}

message SymbolsResp {
    map<string,int32> values = 1;
    map<int32,string> names = 2;
}

message CategoryIden {
    string category = 1;
}

message StepReqs {
    int32 index = 1;
    Step Step = 2;
}

message DelStepReqs {
    string apiname = 1;
    int32 stepId = 2;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message SymbolID {
    string symbol = 1;
}

message Link {
    string id = 1;
    string symbol = 2[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY|UNIQUE_KEY"'];
    string mname1 = 3[(gogoproto.moretags)='orm:",FOREIGN_KEY(model1:models.name)"'];
    int32 mnumber1 = 4[(gogoproto.jsontag) = 'mnumber1'];
    string mname2 = 5[(gogoproto.moretags)='orm:",FOREIGN_KEY(model2:models.name)"'];
    int32 mnumber2 = 6[(gogoproto.jsontag) = 'mnumber2'];
}

message LinkArray {
    repeated Link links = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message ModuleSign {
    string id = 1;
    string name = 2;
    string icon = 3;
    string type = 4;
    string desc = 5;
    repeated string requires = 6;
    string daoImplHref = 7;// 获得DAO布置表（json），罗列DAO所需文件和位置信息
    string daoConfHref = 8;// 获得DAO配置表（json），罗列配置和组件在画面的类型
    string tmpStepHref = 9;// 获得模板步骤信息（json）
    string apiTempHref = 10;// 获得API模板信息（json）
    string mdlTempHref = 11;// 获得Model模板信息（json）
    string homeUrl = 12;
}

message ModuleSignArray {
    repeated ModuleSign modSigns = 1;
}