syntax = "proto3";

package backend.manager.service.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "api";
option (gogoproto.goproto_getters_all) = false;

service BackendManager {
    rpc ModelsInsert(Model) returns (Model) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.insert"
            body: "*"
        };
    };
    rpc ModelsDelete(NameID) returns (Model) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.delete"
            body: "*"
        };
    };
    rpc ModelsUpdate(Model) returns (Empty) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.update"
            body: "*"
        };
    };
    rpc ModelsSelectAll(Empty) returns (ModelArray) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.selectAll"
            body: "*"
        };
    };
    rpc ModelsSelectByName(NameID) returns (Model) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/models.selectByName"
            body: "*"
        };
    };
    rpc Export(ExpOptions) returns (UrlResp) {
        option (google.api.http) = {
            post: "/backend-dashboard/backend/export"
            body: "*"
        };
    };
}

message Empty {

}

message NumberID {
    int64 id = 1;
}

message NameID {
    string name = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

message Prop {
    string name = 1;
    string type = 2;
}

message Model {
    int64 id = 1;
    string name = 2[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY"'];
    repeated Prop props = 3;
    repeated string methods = 4;
    int32 x = 5[(gogoproto.jsontag) = 'x'];
    int32 y = 6[(gogoproto.jsontag) = 'y'];
    int32 width = 7;
    int32 height = 8;
}

message ModelArray {
    repeated Model models = 1;
}

message ExpOptions {
    string name = 1;
    string type = 2;
    string routePrefix = 3;
    bool isMicoServ = 4;
}

message UrlResp {
    string url = 1;
}

// 所有事务流都是函数调用，而且所有的函数返回值都是err结尾
message OperStep {
    string operKey = 1[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY"'];
    repeated string requires = 2;
    string desc = 3;
    map<string,string> inputs = 4;
    repeated string outputs = 5;
    string code = 6;
}

message ApiInfo {
    string name = 1[(gogoproto.moretags)='orm:",NOT_NULL|PRIMARY_KEY"'];
    string model = 2;
    string table = 3;
    map<string,string> params = 4;
    string route = 5;
    string method = 6;
    string return = 7;
    repeated OperStep flows = 8;
}